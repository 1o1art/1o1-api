/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LibDiamond {
  export type GlobalDiamondProxyStruct = {
    namespace: PromiseOrValue<boolean>;
    diamondAddress: PromiseOrValue<string>;
  };

  export type GlobalDiamondProxyStructOutput = [boolean, string] & {
    namespace: boolean;
    diamondAddress: string;
  };
}

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export interface DiamondContractLauncherFacetInterface extends utils.Interface {
  functions: {
    "feePayment()": FunctionFragment;
    "getClaimsBps()": FunctionFragment;
    "getContracts(uint256,uint256,bool)": FunctionFragment;
    "getContractsByOwner(address,uint256,uint256,bool)": FunctionFragment;
    "getFee()": FunctionFragment;
    "getLauncherGlobalDiamondProxy()": FunctionFragment;
    "getMaxFee()": FunctionFragment;
    "getMinFee()": FunctionFragment;
    "getRegistriesByOwner(address,uint256,uint256,bool)": FunctionFragment;
    "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)": FunctionFragment;
    "launch(address,bytes20[],bytes)": FunctionFragment;
    "launchRegistry(bytes20[])": FunctionFragment;
    "setClaimsBps(uint16)": FunctionFragment;
    "setDiamondAddresses(address,address,address,address)": FunctionFragment;
    "setFacetCuts((address,uint8,bytes4[])[])": FunctionFragment;
    "setFee(uint256,uint256,uint256)": FunctionFragment;
    "setLauncherGlobalDiamondProxy((bool,address)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "feePayment"
      | "getClaimsBps"
      | "getContracts"
      | "getContractsByOwner"
      | "getFee"
      | "getLauncherGlobalDiamondProxy"
      | "getMaxFee"
      | "getMinFee"
      | "getRegistriesByOwner"
      | "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)"
      | "launch(address,bytes20[],bytes)"
      | "launchRegistry"
      | "setClaimsBps"
      | "setDiamondAddresses"
      | "setFacetCuts"
      | "setFee"
      | "setLauncherGlobalDiamondProxy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "feePayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimsBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsByOwner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLauncherGlobalDiamondProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMaxFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMinFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRegistriesByOwner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      IDiamondCut.FacetCutStruct[],
      LibDiamond.GlobalDiamondProxyStruct[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "launch(address,bytes20[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "launchRegistry",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimsBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiamondAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFacetCuts",
    values: [IDiamondCut.FacetCutStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLauncherGlobalDiamondProxy",
    values: [LibDiamond.GlobalDiamondProxyStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "feePayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimsBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLauncherGlobalDiamondProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegistriesByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launch(address,bytes20[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimsBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiamondAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFacetCuts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLauncherGlobalDiamondProxy",
    data: BytesLike
  ): Result;

  events: {
    "Launch(address,address)": EventFragment;
    "LaunchRegistry(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Launch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LaunchRegistry"): EventFragment;
}

export interface LaunchEventObject {
  addr: string;
  owner: string;
}
export type LaunchEvent = TypedEvent<[string, string], LaunchEventObject>;

export type LaunchEventFilter = TypedEventFilter<LaunchEvent>;

export interface LaunchRegistryEventObject {
  addr: string;
  owner: string;
}
export type LaunchRegistryEvent = TypedEvent<
  [string, string],
  LaunchRegistryEventObject
>;

export type LaunchRegistryEventFilter = TypedEventFilter<LaunchRegistryEvent>;

export interface DiamondContractLauncherFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondContractLauncherFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feePayment(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimsBps(overrides?: CallOverrides): Promise<[number]>;

    getContracts(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber, BigNumber]>;

    getContractsByOwner(
      contractOwner: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber, BigNumber]>;

    getFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLauncherGlobalDiamondProxy(
      overrides?: CallOverrides
    ): Promise<
      [LibDiamond.GlobalDiamondProxyStructOutput[]] & {
        _proxies: LibDiamond.GlobalDiamondProxyStructOutput[];
      }
    >;

    getMaxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRegistriesByOwner(
      contractOwner: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber, BigNumber]>;

    "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)"(
      owner: PromiseOrValue<string>,
      facetIds: PromiseOrValue<BytesLike>[],
      facets: IDiamondCut.FacetCutStruct[],
      proxies: LibDiamond.GlobalDiamondProxyStruct[],
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "launch(address,bytes20[],bytes)"(
      owner: PromiseOrValue<string>,
      facetIds: PromiseOrValue<BytesLike>[],
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    launchRegistry(
      facetIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimsBps(
      _claimsBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDiamondAddresses(
      diamondCutAddress: PromiseOrValue<string>,
      registerDiamondCutAddress: PromiseOrValue<string>,
      diamondLoupeAddress: PromiseOrValue<string>,
      diamondInitAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFacetCuts(
      cuts: IDiamondCut.FacetCutStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLauncherGlobalDiamondProxy(
      globalDiamondProxy: LibDiamond.GlobalDiamondProxyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  feePayment(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimsBps(overrides?: CallOverrides): Promise<number>;

  getContracts(
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    asc: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber, BigNumber]>;

  getContractsByOwner(
    contractOwner: PromiseOrValue<string>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    asc: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber, BigNumber]>;

  getFee(overrides?: CallOverrides): Promise<BigNumber>;

  getLauncherGlobalDiamondProxy(
    overrides?: CallOverrides
  ): Promise<LibDiamond.GlobalDiamondProxyStructOutput[]>;

  getMaxFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMinFee(overrides?: CallOverrides): Promise<BigNumber>;

  getRegistriesByOwner(
    contractOwner: PromiseOrValue<string>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    asc: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber, BigNumber]>;

  "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)"(
    owner: PromiseOrValue<string>,
    facetIds: PromiseOrValue<BytesLike>[],
    facets: IDiamondCut.FacetCutStruct[],
    proxies: LibDiamond.GlobalDiamondProxyStruct[],
    initCallData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "launch(address,bytes20[],bytes)"(
    owner: PromiseOrValue<string>,
    facetIds: PromiseOrValue<BytesLike>[],
    initCallData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  launchRegistry(
    facetIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimsBps(
    _claimsBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDiamondAddresses(
    diamondCutAddress: PromiseOrValue<string>,
    registerDiamondCutAddress: PromiseOrValue<string>,
    diamondLoupeAddress: PromiseOrValue<string>,
    diamondInitAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFacetCuts(
    cuts: IDiamondCut.FacetCutStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    minFee: PromiseOrValue<BigNumberish>,
    maxFee: PromiseOrValue<BigNumberish>,
    multiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLauncherGlobalDiamondProxy(
    globalDiamondProxy: LibDiamond.GlobalDiamondProxyStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feePayment(overrides?: CallOverrides): Promise<void>;

    getClaimsBps(overrides?: CallOverrides): Promise<number>;

    getContracts(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber, BigNumber]>;

    getContractsByOwner(
      contractOwner: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber, BigNumber]>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getLauncherGlobalDiamondProxy(
      overrides?: CallOverrides
    ): Promise<LibDiamond.GlobalDiamondProxyStructOutput[]>;

    getMaxFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMinFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistriesByOwner(
      contractOwner: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber, BigNumber]>;

    "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)"(
      owner: PromiseOrValue<string>,
      facetIds: PromiseOrValue<BytesLike>[],
      facets: IDiamondCut.FacetCutStruct[],
      proxies: LibDiamond.GlobalDiamondProxyStruct[],
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "launch(address,bytes20[],bytes)"(
      owner: PromiseOrValue<string>,
      facetIds: PromiseOrValue<BytesLike>[],
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    launchRegistry(
      facetIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    setClaimsBps(
      _claimsBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiamondAddresses(
      diamondCutAddress: PromiseOrValue<string>,
      registerDiamondCutAddress: PromiseOrValue<string>,
      diamondLoupeAddress: PromiseOrValue<string>,
      diamondInitAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFacetCuts(
      cuts: IDiamondCut.FacetCutStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLauncherGlobalDiamondProxy(
      globalDiamondProxy: LibDiamond.GlobalDiamondProxyStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Launch(address,address)"(
      addr?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): LaunchEventFilter;
    Launch(
      addr?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): LaunchEventFilter;

    "LaunchRegistry(address,address)"(
      addr?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): LaunchRegistryEventFilter;
    LaunchRegistry(
      addr?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): LaunchRegistryEventFilter;
  };

  estimateGas: {
    feePayment(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimsBps(overrides?: CallOverrides): Promise<BigNumber>;

    getContracts(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractsByOwner(
      contractOwner: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getLauncherGlobalDiamondProxy(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMinFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistriesByOwner(
      contractOwner: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)"(
      owner: PromiseOrValue<string>,
      facetIds: PromiseOrValue<BytesLike>[],
      facets: IDiamondCut.FacetCutStruct[],
      proxies: LibDiamond.GlobalDiamondProxyStruct[],
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "launch(address,bytes20[],bytes)"(
      owner: PromiseOrValue<string>,
      facetIds: PromiseOrValue<BytesLike>[],
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    launchRegistry(
      facetIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimsBps(
      _claimsBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDiamondAddresses(
      diamondCutAddress: PromiseOrValue<string>,
      registerDiamondCutAddress: PromiseOrValue<string>,
      diamondLoupeAddress: PromiseOrValue<string>,
      diamondInitAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFacetCuts(
      cuts: IDiamondCut.FacetCutStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLauncherGlobalDiamondProxy(
      globalDiamondProxy: LibDiamond.GlobalDiamondProxyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feePayment(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimsBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContracts(
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractsByOwner(
      contractOwner: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLauncherGlobalDiamondProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegistriesByOwner(
      contractOwner: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      asc: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "launch(address,bytes20[],(address,uint8,bytes4[])[],(bool,address)[],bytes)"(
      owner: PromiseOrValue<string>,
      facetIds: PromiseOrValue<BytesLike>[],
      facets: IDiamondCut.FacetCutStruct[],
      proxies: LibDiamond.GlobalDiamondProxyStruct[],
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "launch(address,bytes20[],bytes)"(
      owner: PromiseOrValue<string>,
      facetIds: PromiseOrValue<BytesLike>[],
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    launchRegistry(
      facetIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimsBps(
      _claimsBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDiamondAddresses(
      diamondCutAddress: PromiseOrValue<string>,
      registerDiamondCutAddress: PromiseOrValue<string>,
      diamondLoupeAddress: PromiseOrValue<string>,
      diamondInitAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFacetCuts(
      cuts: IDiamondCut.FacetCutStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      multiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLauncherGlobalDiamondProxy(
      globalDiamondProxy: LibDiamond.GlobalDiamondProxyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
