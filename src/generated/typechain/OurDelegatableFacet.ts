/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type CaveatStruct = {
  enforcer: PromiseOrValue<string>;
  terms: PromiseOrValue<BytesLike>;
};

export type CaveatStructOutput = [string, string] & {
  enforcer: string;
  terms: string;
};

export type DelegationStruct = {
  delegate: PromiseOrValue<string>;
  authority: PromiseOrValue<BytesLike>;
  caveats: CaveatStruct[];
};

export type DelegationStructOutput = [string, string, CaveatStructOutput[]] & {
  delegate: string;
  authority: string;
  caveats: CaveatStructOutput[];
};

export type TransactionStruct = {
  to: PromiseOrValue<string>;
  gasLimit: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
};

export type TransactionStructOutput = [string, BigNumber, string] & {
  to: string;
  gasLimit: BigNumber;
  data: string;
};

export type SignedDelegationStruct = {
  delegation: DelegationStruct;
  signature: PromiseOrValue<BytesLike>;
};

export type SignedDelegationStructOutput = [DelegationStructOutput, string] & {
  delegation: DelegationStructOutput;
  signature: string;
};

export type InvocationStruct = {
  transaction: TransactionStruct;
  authority: SignedDelegationStruct[];
};

export type InvocationStructOutput = [
  TransactionStructOutput,
  SignedDelegationStructOutput[]
] & {
  transaction: TransactionStructOutput;
  authority: SignedDelegationStructOutput[];
};

export type ReplayProtectionStruct = {
  nonce: PromiseOrValue<BigNumberish>;
  queue: PromiseOrValue<BigNumberish>;
};

export type ReplayProtectionStructOutput = [BigNumber, BigNumber] & {
  nonce: BigNumber;
  queue: BigNumber;
};

export type InvocationsStruct = {
  batch: InvocationStruct[];
  replayProtection: ReplayProtectionStruct;
};

export type InvocationsStructOutput = [
  InvocationStructOutput[],
  ReplayProtectionStructOutput
] & {
  batch: InvocationStructOutput[];
  replayProtection: ReplayProtectionStructOutput;
};

export type SignedInvocationStruct = {
  invocations: InvocationsStruct;
  signature: PromiseOrValue<BytesLike>;
};

export type SignedInvocationStructOutput = [InvocationsStructOutput, string] & {
  invocations: InvocationsStructOutput;
  signature: string;
};

export interface OurDelegatableFacetInterface extends utils.Interface {
  functions: {
    "GET_CAVEAT_ARRAY_PACKETHASH((address,bytes)[])": FunctionFragment;
    "GET_CAVEAT_PACKETHASH((address,bytes))": FunctionFragment;
    "GET_DELEGATION_PACKETHASH((address,bytes32,(address,bytes)[]))": FunctionFragment;
    "GET_INVOCATIONS_PACKETHASH((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))": FunctionFragment;
    "GET_INVOCATION_ARRAY_PACKETHASH(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])": FunctionFragment;
    "GET_INVOCATION_PACKETHASH(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[]))": FunctionFragment;
    "GET_REPLAYPROTECTION_PACKETHASH((uint256,uint256))": FunctionFragment;
    "GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(((address,bytes32,(address,bytes)[]),bytes)[])": FunctionFragment;
    "GET_SIGNEDDELEGATION_PACKETHASH(((address,bytes32,(address,bytes)[]),bytes))": FunctionFragment;
    "GET_TRANSACTION_PACKETHASH((address,uint256,bytes))": FunctionFragment;
    "contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])": FunctionFragment;
    "getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))": FunctionFragment;
    "getEIP712DomainHash()": FunctionFragment;
    "getEIP712DomainHash(string,string,uint256,address)": FunctionFragment;
    "getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))": FunctionFragment;
    "getNonce(address,uint256)": FunctionFragment;
    "invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])": FunctionFragment;
    "setDomainHash(string)": FunctionFragment;
    "verifyDelegationSignature(((address,bytes32,(address,bytes)[]),bytes))": FunctionFragment;
    "verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GET_CAVEAT_ARRAY_PACKETHASH"
      | "GET_CAVEAT_PACKETHASH"
      | "GET_DELEGATION_PACKETHASH"
      | "GET_INVOCATIONS_PACKETHASH"
      | "GET_INVOCATION_ARRAY_PACKETHASH"
      | "GET_INVOCATION_PACKETHASH"
      | "GET_REPLAYPROTECTION_PACKETHASH"
      | "GET_SIGNEDDELEGATION_ARRAY_PACKETHASH"
      | "GET_SIGNEDDELEGATION_PACKETHASH"
      | "GET_TRANSACTION_PACKETHASH"
      | "contractInvoke"
      | "getDelegationTypedDataHash"
      | "getEIP712DomainHash()"
      | "getEIP712DomainHash(string,string,uint256,address)"
      | "getInvocationsTypedDataHash"
      | "getNonce"
      | "invoke"
      | "setDomainHash"
      | "verifyDelegationSignature"
      | "verifyInvocationSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GET_CAVEAT_ARRAY_PACKETHASH",
    values: [CaveatStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_CAVEAT_PACKETHASH",
    values: [CaveatStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_DELEGATION_PACKETHASH",
    values: [DelegationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_INVOCATIONS_PACKETHASH",
    values: [InvocationsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_INVOCATION_ARRAY_PACKETHASH",
    values: [InvocationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_INVOCATION_PACKETHASH",
    values: [InvocationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_REPLAYPROTECTION_PACKETHASH",
    values: [ReplayProtectionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_SIGNEDDELEGATION_ARRAY_PACKETHASH",
    values: [SignedDelegationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_SIGNEDDELEGATION_PACKETHASH",
    values: [SignedDelegationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "GET_TRANSACTION_PACKETHASH",
    values: [TransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "contractInvoke",
    values: [InvocationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationTypedDataHash",
    values: [DelegationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getEIP712DomainHash()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEIP712DomainHash(string,string,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvocationsTypedDataHash",
    values: [InvocationsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [SignedInvocationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDomainHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDelegationSignature",
    values: [SignedDelegationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyInvocationSignature",
    values: [SignedInvocationStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "GET_CAVEAT_ARRAY_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_CAVEAT_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_DELEGATION_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_INVOCATIONS_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_INVOCATION_ARRAY_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_INVOCATION_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_REPLAYPROTECTION_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_SIGNEDDELEGATION_ARRAY_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_SIGNEDDELEGATION_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GET_TRANSACTION_PACKETHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractInvoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationTypedDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEIP712DomainHash()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEIP712DomainHash(string,string,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvocationsTypedDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDelegationSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyInvocationSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OurDelegatableFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OurDelegatableFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GET_CAVEAT_ARRAY_PACKETHASH(
      _input: CaveatStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_CAVEAT_PACKETHASH(
      _input: CaveatStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_DELEGATION_PACKETHASH(
      _input: DelegationStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_INVOCATIONS_PACKETHASH(
      _input: InvocationsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_INVOCATION_ARRAY_PACKETHASH(
      _input: InvocationStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_INVOCATION_PACKETHASH(
      _input: InvocationStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_REPLAYPROTECTION_PACKETHASH(
      _input: ReplayProtectionStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(
      _input: SignedDelegationStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_SIGNEDDELEGATION_PACKETHASH(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    GET_TRANSACTION_PACKETHASH(
      _input: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contractInvoke(
      batch: InvocationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDelegationTypedDataHash(
      delegation: DelegationStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEIP712DomainHash()"(overrides?: CallOverrides): Promise<[string]>;

    "getEIP712DomainHash(string,string,uint256,address)"(
      contractName: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      verifyingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInvocationsTypedDataHash(
      invocations: InvocationsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNonce(
      intendedSender: PromiseOrValue<string>,
      queue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invoke(
      signedInvocations: SignedInvocationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDomainHash(
      contractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyDelegationSignature(
      signedDelegation: SignedDelegationStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyInvocationSignature(
      signedInvocation: SignedInvocationStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  GET_CAVEAT_ARRAY_PACKETHASH(
    _input: CaveatStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  GET_CAVEAT_PACKETHASH(
    _input: CaveatStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  GET_DELEGATION_PACKETHASH(
    _input: DelegationStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  GET_INVOCATIONS_PACKETHASH(
    _input: InvocationsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  GET_INVOCATION_ARRAY_PACKETHASH(
    _input: InvocationStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  GET_INVOCATION_PACKETHASH(
    _input: InvocationStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  GET_REPLAYPROTECTION_PACKETHASH(
    _input: ReplayProtectionStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(
    _input: SignedDelegationStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  GET_SIGNEDDELEGATION_PACKETHASH(
    _input: SignedDelegationStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  GET_TRANSACTION_PACKETHASH(
    _input: TransactionStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  contractInvoke(
    batch: InvocationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDelegationTypedDataHash(
    delegation: DelegationStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEIP712DomainHash()"(overrides?: CallOverrides): Promise<string>;

  "getEIP712DomainHash(string,string,uint256,address)"(
    contractName: PromiseOrValue<string>,
    version: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    verifyingContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInvocationsTypedDataHash(
    invocations: InvocationsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getNonce(
    intendedSender: PromiseOrValue<string>,
    queue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invoke(
    signedInvocations: SignedInvocationStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDomainHash(
    contractName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyDelegationSignature(
    signedDelegation: SignedDelegationStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyInvocationSignature(
    signedInvocation: SignedInvocationStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    GET_CAVEAT_ARRAY_PACKETHASH(
      _input: CaveatStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    GET_CAVEAT_PACKETHASH(
      _input: CaveatStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    GET_DELEGATION_PACKETHASH(
      _input: DelegationStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    GET_INVOCATIONS_PACKETHASH(
      _input: InvocationsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    GET_INVOCATION_ARRAY_PACKETHASH(
      _input: InvocationStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    GET_INVOCATION_PACKETHASH(
      _input: InvocationStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    GET_REPLAYPROTECTION_PACKETHASH(
      _input: ReplayProtectionStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(
      _input: SignedDelegationStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    GET_SIGNEDDELEGATION_PACKETHASH(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    GET_TRANSACTION_PACKETHASH(
      _input: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    contractInvoke(
      batch: InvocationStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDelegationTypedDataHash(
      delegation: DelegationStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEIP712DomainHash()"(overrides?: CallOverrides): Promise<string>;

    "getEIP712DomainHash(string,string,uint256,address)"(
      contractName: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      verifyingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInvocationsTypedDataHash(
      invocations: InvocationsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(
      intendedSender: PromiseOrValue<string>,
      queue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoke(
      signedInvocations: SignedInvocationStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDomainHash(
      contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyDelegationSignature(
      signedDelegation: SignedDelegationStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyInvocationSignature(
      signedInvocation: SignedInvocationStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    GET_CAVEAT_ARRAY_PACKETHASH(
      _input: CaveatStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_CAVEAT_PACKETHASH(
      _input: CaveatStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_DELEGATION_PACKETHASH(
      _input: DelegationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_INVOCATIONS_PACKETHASH(
      _input: InvocationsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_INVOCATION_ARRAY_PACKETHASH(
      _input: InvocationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_INVOCATION_PACKETHASH(
      _input: InvocationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_REPLAYPROTECTION_PACKETHASH(
      _input: ReplayProtectionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(
      _input: SignedDelegationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_SIGNEDDELEGATION_PACKETHASH(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GET_TRANSACTION_PACKETHASH(
      _input: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractInvoke(
      batch: InvocationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDelegationTypedDataHash(
      delegation: DelegationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEIP712DomainHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getEIP712DomainHash(string,string,uint256,address)"(
      contractName: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      verifyingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvocationsTypedDataHash(
      invocations: InvocationsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      intendedSender: PromiseOrValue<string>,
      queue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoke(
      signedInvocations: SignedInvocationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDomainHash(
      contractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyDelegationSignature(
      signedDelegation: SignedDelegationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyInvocationSignature(
      signedInvocation: SignedInvocationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GET_CAVEAT_ARRAY_PACKETHASH(
      _input: CaveatStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_CAVEAT_PACKETHASH(
      _input: CaveatStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_DELEGATION_PACKETHASH(
      _input: DelegationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_INVOCATIONS_PACKETHASH(
      _input: InvocationsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_INVOCATION_ARRAY_PACKETHASH(
      _input: InvocationStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_INVOCATION_PACKETHASH(
      _input: InvocationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_REPLAYPROTECTION_PACKETHASH(
      _input: ReplayProtectionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(
      _input: SignedDelegationStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_SIGNEDDELEGATION_PACKETHASH(
      _input: SignedDelegationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GET_TRANSACTION_PACKETHASH(
      _input: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractInvoke(
      batch: InvocationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDelegationTypedDataHash(
      delegation: DelegationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEIP712DomainHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEIP712DomainHash(string,string,uint256,address)"(
      contractName: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      verifyingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvocationsTypedDataHash(
      invocations: InvocationsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      intendedSender: PromiseOrValue<string>,
      queue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoke(
      signedInvocations: SignedInvocationStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDomainHash(
      contractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyDelegationSignature(
      signedDelegation: SignedDelegationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyInvocationSignature(
      signedInvocation: SignedInvocationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
