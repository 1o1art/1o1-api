/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Metadata, MetadataInterface } from "../Metadata";

const _abi = [
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102a8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806395d89b4114610059575b600080fd5b610043610061565b6040516100509190610163565b60405180910390f35b6100436100ed565b6040516354f6127f60e01b81527fdc581f49ae8f28cd1d1a3cd3c34db0ef4b00bbf862a3e1b09f70eb94d8f6f4fe600482015260609030906354f6127f906024015b600060405180830381865afa1580156100c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100e891908101906101c5565b905090565b6040516354f6127f60e01b81527fe0fabf35b4adb3c51a6bec87facd17fc163d2a552e97c64da8db082185e373c9600482015260609030906354f6127f906024016100a3565b60005b8381101561014e578181015183820152602001610136565b8381111561015d576000848401525b50505050565b6020815260008251806020840152610182816040850160208701610133565b601f01601f19169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156101d757600080fd5b815167ffffffffffffffff808211156101ef57600080fd5b818401915084601f83011261020357600080fd5b81518181111561021557610215610196565b604051601f8201601f19908116603f0116810190838211818310171561023d5761023d610196565b8160405282815287602084870101111561025657600080fd5b610267836020830160208801610133565b97965050505050505056fea264697066735822122089441445790bb74993f0e18d2f24a0e17bf0116b5f9d2dc04eeab9b4ed689fe364736f6c634300080f0033";

type MetadataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetadataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Metadata__factory extends ContractFactory {
  constructor(...args: MetadataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Metadata> {
    return super.deploy(overrides || {}) as Promise<Metadata>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Metadata {
    return super.attach(address) as Metadata;
  }
  override connect(signer: Signer): Metadata__factory {
    return super.connect(signer) as Metadata__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetadataInterface {
    return new utils.Interface(_abi) as MetadataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Metadata {
    return new Contract(address, _abi, signerOrProvider) as Metadata;
  }
}
