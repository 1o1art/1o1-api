/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LibClaims {
  export type ClaimRuleStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    claimLimit: PromiseOrValue<BigNumberish>;
    maxEditionSize: PromiseOrValue<BigNumberish>;
    royaltyBps: PromiseOrValue<BigNumberish>;
    royaltyAddress: PromiseOrValue<string>;
    payoutAddress: PromiseOrValue<string>;
  };

  export type ClaimRuleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    string,
    string
  ] & {
    startTime: BigNumber;
    endTime: BigNumber;
    price: BigNumber;
    claimLimit: number;
    maxEditionSize: number;
    royaltyBps: number;
    royaltyAddress: string;
    payoutAddress: string;
  };

  export type ClaimStruct = {
    image: PromiseOrValue<string>;
    animation: PromiseOrValue<string>;
    claimRule: LibClaims.ClaimRuleStruct;
  };

  export type ClaimStructOutput = [
    string,
    string,
    LibClaims.ClaimRuleStructOutput
  ] & {
    image: string;
    animation: string;
    claimRule: LibClaims.ClaimRuleStructOutput;
  };
}

export interface ClaimsFacetInterface extends utils.Interface {
  functions: {
    "addClaimAnimationChunk(uint256,string,uint256,uint256)": FunctionFragment;
    "addClaimAnimationChunk(uint256,string,uint256)": FunctionFragment;
    "addClaimImageChunk(uint256,string,uint256,uint256)": FunctionFragment;
    "addClaimImageChunk(uint256,string,uint256)": FunctionFragment;
    "claimTokenURI(uint256)": FunctionFragment;
    "createClaim(string,string,uint8,uint8,(uint256,uint256,uint256,uint32,uint32,uint16,address,address),uint256,uint256)": FunctionFragment;
    "extClaimTokenURI(uint256,string,string,string)": FunctionFragment;
    "getClaim(uint256)": FunctionFragment;
    "getClaimChunkBoundaries(uint256)": FunctionFragment;
    "getClaimCreator(uint256)": FunctionFragment;
    "getClaimFee()": FunctionFragment;
    "getClaimMaxFee()": FunctionFragment;
    "getClaimMinFee()": FunctionFragment;
    "getClaimSupply()": FunctionFragment;
    "getMissingClaimChunks(uint256)": FunctionFragment;
    "getNumTokensClaimedByAddress(uint256,address)": FunctionFragment;
    "getTokensMintedFromClaim(uint256)": FunctionFragment;
    "getTotalClaimChunks(uint256)": FunctionFragment;
    "isTokenFromClaim(uint256)": FunctionFragment;
    "mintClaim(uint256,address,uint32)": FunctionFragment;
    "setClaimMetadata(uint256,bytes32[],bytes[])": FunctionFragment;
    "updateClaimRule(uint256,(uint256,uint256,uint256,uint32,uint32,uint16,address,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addClaimAnimationChunk(uint256,string,uint256,uint256)"
      | "addClaimAnimationChunk(uint256,string,uint256)"
      | "addClaimImageChunk(uint256,string,uint256,uint256)"
      | "addClaimImageChunk(uint256,string,uint256)"
      | "claimTokenURI"
      | "createClaim"
      | "extClaimTokenURI"
      | "getClaim"
      | "getClaimChunkBoundaries"
      | "getClaimCreator"
      | "getClaimFee"
      | "getClaimMaxFee"
      | "getClaimMinFee"
      | "getClaimSupply"
      | "getMissingClaimChunks"
      | "getNumTokensClaimedByAddress"
      | "getTokensMintedFromClaim"
      | "getTotalClaimChunks"
      | "isTokenFromClaim"
      | "mintClaim"
      | "setClaimMetadata"
      | "updateClaimRule"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addClaimAnimationChunk(uint256,string,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addClaimAnimationChunk(uint256,string,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addClaimImageChunk(uint256,string,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addClaimImageChunk(uint256,string,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      LibClaims.ClaimRuleStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extClaimTokenURI",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimChunkBoundaries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimCreator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimMaxFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimMinFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMissingClaimChunks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTokensClaimedByAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMintedFromClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalClaimChunks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenFromClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintClaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimMetadata",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimRule",
    values: [PromiseOrValue<BigNumberish>, LibClaims.ClaimRuleStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "addClaimAnimationChunk(uint256,string,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addClaimAnimationChunk(uint256,string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addClaimImageChunk(uint256,string,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addClaimImageChunk(uint256,string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extClaimTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimChunkBoundaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimMaxFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimMinFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMissingClaimChunks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokensClaimedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMintedFromClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalClaimChunks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenFromClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimRule",
    data: BytesLike
  ): Result;

  events: {
    "ClaimCreated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimCreated"): EventFragment;
}

export interface ClaimCreatedEventObject {
  creator: string;
  claimId: BigNumber;
}
export type ClaimCreatedEvent = TypedEvent<
  [string, BigNumber],
  ClaimCreatedEventObject
>;

export type ClaimCreatedEventFilter = TypedEventFilter<ClaimCreatedEvent>;

export interface ClaimsFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClaimsFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "addClaimAnimationChunk(uint256,string,uint256,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Animation: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      numChunks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addClaimAnimationChunk(uint256,string,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Animation: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addClaimImageChunk(uint256,string,uint256,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Image: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      numChunks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addClaimImageChunk(uint256,string,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Image: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createClaim(
      base64Image: PromiseOrValue<string>,
      base64Animation: PromiseOrValue<string>,
      imageMethod: PromiseOrValue<BigNumberish>,
      animationMethod: PromiseOrValue<BigNumberish>,
      claimRule: LibClaims.ClaimRuleStruct,
      totalImgSize: PromiseOrValue<BigNumberish>,
      totalAnimSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extClaimTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      desc: PromiseOrValue<string>,
      attributes: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClaim(
      _claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LibClaims.ClaimStructOutput]>;

    getClaimChunkBoundaries(
      totalSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getClaimCreator(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClaimFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimMaxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimMinFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMissingClaimChunks(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getNumTokensClaimedByAddress(
      claimId: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokensMintedFromClaim(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalClaimChunks(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isTokenFromClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintClaim(
      claimId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimMetadata(
      claimId: PromiseOrValue<BigNumberish>,
      dataKeys: PromiseOrValue<BytesLike>[],
      dataValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateClaimRule(
      claimId: PromiseOrValue<BigNumberish>,
      claimRule: LibClaims.ClaimRuleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "addClaimAnimationChunk(uint256,string,uint256,uint256)"(
    claimId: PromiseOrValue<BigNumberish>,
    base64Animation: PromiseOrValue<string>,
    chunkNo: PromiseOrValue<BigNumberish>,
    numChunks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addClaimAnimationChunk(uint256,string,uint256)"(
    claimId: PromiseOrValue<BigNumberish>,
    base64Animation: PromiseOrValue<string>,
    chunkNo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addClaimImageChunk(uint256,string,uint256,uint256)"(
    claimId: PromiseOrValue<BigNumberish>,
    base64Image: PromiseOrValue<string>,
    chunkNo: PromiseOrValue<BigNumberish>,
    numChunks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addClaimImageChunk(uint256,string,uint256)"(
    claimId: PromiseOrValue<BigNumberish>,
    base64Image: PromiseOrValue<string>,
    chunkNo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createClaim(
    base64Image: PromiseOrValue<string>,
    base64Animation: PromiseOrValue<string>,
    imageMethod: PromiseOrValue<BigNumberish>,
    animationMethod: PromiseOrValue<BigNumberish>,
    claimRule: LibClaims.ClaimRuleStruct,
    totalImgSize: PromiseOrValue<BigNumberish>,
    totalAnimSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extClaimTokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    desc: PromiseOrValue<string>,
    attributes: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaim(
    _claimId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LibClaims.ClaimStructOutput>;

  getClaimChunkBoundaries(
    totalSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getClaimCreator(
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimMaxFee(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimMinFee(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getMissingClaimChunks(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  getNumTokensClaimedByAddress(
    claimId: PromiseOrValue<BigNumberish>,
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensMintedFromClaim(
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalClaimChunks(
    claimId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  isTokenFromClaim(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintClaim(
    claimId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimMetadata(
    claimId: PromiseOrValue<BigNumberish>,
    dataKeys: PromiseOrValue<BytesLike>[],
    dataValues: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateClaimRule(
    claimId: PromiseOrValue<BigNumberish>,
    claimRule: LibClaims.ClaimRuleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "addClaimAnimationChunk(uint256,string,uint256,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Animation: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      numChunks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addClaimAnimationChunk(uint256,string,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Animation: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addClaimImageChunk(uint256,string,uint256,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Image: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      numChunks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addClaimImageChunk(uint256,string,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Image: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createClaim(
      base64Image: PromiseOrValue<string>,
      base64Animation: PromiseOrValue<string>,
      imageMethod: PromiseOrValue<BigNumberish>,
      animationMethod: PromiseOrValue<BigNumberish>,
      claimRule: LibClaims.ClaimRuleStruct,
      totalImgSize: PromiseOrValue<BigNumberish>,
      totalAnimSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    extClaimTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      desc: PromiseOrValue<string>,
      attributes: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaim(
      _claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LibClaims.ClaimStructOutput>;

    getClaimChunkBoundaries(
      totalSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getClaimCreator(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimMaxFee(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimMinFee(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getMissingClaimChunks(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getNumTokensClaimedByAddress(
      claimId: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensMintedFromClaim(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalClaimChunks(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isTokenFromClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintClaim(
      claimId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimMetadata(
      claimId: PromiseOrValue<BigNumberish>,
      dataKeys: PromiseOrValue<BytesLike>[],
      dataValues: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateClaimRule(
      claimId: PromiseOrValue<BigNumberish>,
      claimRule: LibClaims.ClaimRuleStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimCreated(address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      claimId?: PromiseOrValue<BigNumberish> | null
    ): ClaimCreatedEventFilter;
    ClaimCreated(
      creator?: PromiseOrValue<string> | null,
      claimId?: PromiseOrValue<BigNumberish> | null
    ): ClaimCreatedEventFilter;
  };

  estimateGas: {
    "addClaimAnimationChunk(uint256,string,uint256,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Animation: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      numChunks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addClaimAnimationChunk(uint256,string,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Animation: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addClaimImageChunk(uint256,string,uint256,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Image: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      numChunks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addClaimImageChunk(uint256,string,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Image: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createClaim(
      base64Image: PromiseOrValue<string>,
      base64Animation: PromiseOrValue<string>,
      imageMethod: PromiseOrValue<BigNumberish>,
      animationMethod: PromiseOrValue<BigNumberish>,
      claimRule: LibClaims.ClaimRuleStruct,
      totalImgSize: PromiseOrValue<BigNumberish>,
      totalAnimSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extClaimTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      desc: PromiseOrValue<string>,
      attributes: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaim(
      _claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimChunkBoundaries(
      totalSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimCreator(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimMaxFee(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimMinFee(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getMissingClaimChunks(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTokensClaimedByAddress(
      claimId: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensMintedFromClaim(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalClaimChunks(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenFromClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintClaim(
      claimId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimMetadata(
      claimId: PromiseOrValue<BigNumberish>,
      dataKeys: PromiseOrValue<BytesLike>[],
      dataValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateClaimRule(
      claimId: PromiseOrValue<BigNumberish>,
      claimRule: LibClaims.ClaimRuleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "addClaimAnimationChunk(uint256,string,uint256,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Animation: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      numChunks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addClaimAnimationChunk(uint256,string,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Animation: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addClaimImageChunk(uint256,string,uint256,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Image: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      numChunks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addClaimImageChunk(uint256,string,uint256)"(
      claimId: PromiseOrValue<BigNumberish>,
      base64Image: PromiseOrValue<string>,
      chunkNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createClaim(
      base64Image: PromiseOrValue<string>,
      base64Animation: PromiseOrValue<string>,
      imageMethod: PromiseOrValue<BigNumberish>,
      animationMethod: PromiseOrValue<BigNumberish>,
      claimRule: LibClaims.ClaimRuleStruct,
      totalImgSize: PromiseOrValue<BigNumberish>,
      totalAnimSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extClaimTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      desc: PromiseOrValue<string>,
      attributes: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaim(
      _claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimChunkBoundaries(
      totalSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimCreator(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimMaxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimMinFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMissingClaimChunks(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTokensClaimedByAddress(
      claimId: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensMintedFromClaim(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalClaimChunks(
      claimId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenFromClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintClaim(
      claimId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimMetadata(
      claimId: PromiseOrValue<BigNumberish>,
      dataKeys: PromiseOrValue<BytesLike>[],
      dataValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateClaimRule(
      claimId: PromiseOrValue<BigNumberish>,
      claimRule: LibClaims.ClaimRuleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
